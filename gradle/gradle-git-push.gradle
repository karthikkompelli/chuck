apply plugin: 'maven-publish'

/**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))


def getVersionName = { ->
    return "2.1.1" // Replace with version Name
}

def getArtificatId = { ->
    return "library" // Replace with library name ID
}

publishing {
    publications {
        bar(MavenPublication) {
            groupId 'com.karthikkompelli.chuck'
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-release.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // invalid dependencies should be ignored

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dep.name)

                    if (dep.version == 'unspecified') {
                        dependencyNode.appendNode('groupId', project.ext.pomGroupID)
                        dependencyNode.appendNode('version', project.ext.pomVersion)
                        System.println("${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}")
                    } else {
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('version', dep.version)
                        System.println("${dep.group} ${dep.name} ${dep.version}")
                    }

                    dependencyNode.appendNode('scope', scope)
                    // Some dependencies may have types, such as aar, that should be mentioned in the POM file
                    def artifactsList = dep.properties['artifacts']
                    if (artifactsList != null && artifactsList.size() > 0) {
                        final artifact = artifactsList[0]
                        dependencyNode.appendNode('type', artifact.getType())
                    }

                    if (!dep.transitive) {
                        // In case of non transitive dependency, all its dependencies should be force excluded from them POM file
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // For transitive with exclusions, all exclude rules should be added to the POM file
                        final exclusions = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            final exclusionNode = exclusions.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/KarthikKompelli/chuck")

            credentials {
                /**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}
